# vim: set expandtab ts=2 sw=2:
---
functions:
  get:
    :examplereturn: data
    :retval: 'Any'
    :description: 'Connects to the backend and retrieves the data stored at **key**'
    :softfail: nil
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
    :examples:
      - "
         $database_server = libkv::get(\"/database/${::fqdn}\")\n
         class { \"wordpress\":\n
         \tdb_host => $database_server,\n
         }"
  put:
    :examplereturn: suceeeded
    :retval: 'Boolean'
    :description: 'Sets the data at `key` to the specified `value`'
    :softfail: 'false'
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
          - type: 'Any'
            name: 'value'
    :examples:
      - "libkv::put(\"/hosts/${::fqdn}\", \"${::ipaddress}\")"
  delete:
    :examplereturn: suceeeded
    :retval: 'Boolean'
    :description: 'Deletes the specified `key`. Must be a single key'
    :softfail: 'false'
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
    :examples:
      - "$response = libkv::delete(\"/hosts/${::fqdn}\")\n"
  exists:
    :examplereturn: exists
    :retval: 'Boolean'
    :description: 'Returns true if `key` exists'
    :softfail: nil
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
    :examples:
      - "
        if (libkv::exists(\"/hosts/${::fqdn}\") == true) {\n
        \tnotify { \"/hosts/${::fqdn} exists\": }\n
        }"
  list:
    :examplereturn: list
    :retval: 'Hash'
    :description: 'Lists all keys in the folder named `key`'
    :softfail: "{}"
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
    :examples:
      - "
        $list = libkv::list('/hosts')\n
        $list.each |String $host, String $ip| {\n
        \thost { $host:\n
        \t\tip => $ip,\n
        \t}\n
        }"
  deletetree:
    :examplereturn: succeeded
    :retval: 'Boolean'
    :description: 'Deletes the whole folder named `key`. This action is inherently unsafe.'
    :softfail: 'false'
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
    :examples:
      - "$response = libkv::deletetree(\"/hosts\")\n"
  atomic_create:
    :examplereturn: suceeeded
    :retval: 'Boolean'
    :description: 'Store `value` in `key`, but only if key does not exist already, and do so atomically'
    :softfail: "{}"
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
          - type: 'Any'
            name: 'value'
    :examples:
      - "
         $id = rand(0,2048)\n
         $result = libkv::atomic_create(\"/serverids/${::fqdn}\", $id)\n
         if ($result == false) {\n
         \t$serverid = libkv::get(\"/serverids/${::fqdn}\")\n
         } else {\n
         \t$serverid = $id\n
         }\n
         notify(\"the server id of ${serverid} is indempotent!\")
        "
  atomic_delete:
    :examplereturn: suceeded
    :retval: 'Boolean'
    :description: 'Delete `key`, but only if key still matches the value of `previous`'
    :softfail: "{}"
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
          - type: 'Hash'
            name: 'previous'
    :examples:
      - "
         $previous = libkv::atomic_get(\"/env/${::fqdn}\")\n
         $result = libkv::atomic_delete(\"/env/${::fqdn}\", $previous)\n
        "
  atomic_get:
    :examplereturn: previous
    :retval: 'Hash'
    :description: 'Get the value of key, but return it in a hash suitable for use with other atomic functions'
    :softfail: "{}"
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
    :examples:
      - "
         $previous = libkv::atomic_get(\"/env/${::fqdn}\")\n
         notify { \"previous value is ${previous[\"value\"]}\": }\n
        "
  atomic_put:
    :examplereturn: suceeeded
    :retval: 'Boolean'
    :description: 'Set `key` to `value`, but only if the key is still set to `previous`'
    :softfail: "{}"
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
          - type: 'Any'
            name: 'value'
          - type: 'Hash'
            name: 'previous'
    :examples:
      - "
         $newvalue = 'new'\n
         $previous = libkv::atomic_get(\"/env/${::fqdn}\")\n
         $result = libkv::atomic_put(\"/env/${::fqdn}\", $newvalue, $previous)\n
         if ($result == true) {\n
         \t$real = $newvalue\n
         } else {\n
         \t$real = libkv::get(\"/env/${::fqdn}\")\n
         }\n
         notify { \"I updated to $real atomically!\": }\n
        "
  atomic_list:
    :examplereturn: list
    :retval: 'Hash'
    :description: 'List all keys in folder `key`, but return them in a format suitable for other atomic functions'
    :softfail: "{}"
    :signatures:
      v1:
        args:
          - type: 'String'
            name: 'key'
    :examples:
      - "# Add a host resource for everything under /hosts\n\n
        $list = libkv::atomic_list('/hosts')\n
        $list.each |String $host, Hash $data| {\n
        \thost { $host:\n
        \t\tip => $data['value'],\n
        \t}\n
        }"
      - "# For each host in /hosts, atomically update the value to 'newip'\n\n
        $list = libkv::atomic_list('/hosts')\n
        $list.each |String $host, Hash $data| {\n
        \tlibkv::atomic_put(\"/hosts/${host}\", \"newip\", $data)\n
        }"
  empty_value:
    :examplereturn: empty_value
    :retval: 'Hash'
    :description: 'Return an hash suitable for other atomic functions, that represents an empty value'
    :softfail: nil
    :allow_empty: true
    :examples:
      - "
         $empty = libkv::empty()\n
         $result = libkv::atomic_get(\"/some/key\")\n
         if ($result == $empty) {\n
         \tnotify { \"/some/key doesn't exist\": }\n
         }\n
        "
  info:
    :examplereturn: provider_information
    :retval: 'Hash'
    :description: 'Return a hash of informtion on the underlying provider. Provider specific'
    :softfail: "{}"
    :allow_empty: true
    :examples:
      - "
         $info = libkv::info()\n
         notify { \"libkv connection is: ${info}\": }\n
        "
  supports:
    :examplereturn: supported_functions
    :retval: 'Array'
    :description: 'Return an array of all supported functions'
    :softfail: "[]"
    :allow_empty: true
    :examples:
      - "
         $supports = libkv::supports()\n
         if ($supports in 'atomic_get') {\n
         \tlibkv::atomic_get('/some/key')\n
         } else {\n
         \tlibkv::get('/some/key')\n
         }\n
        "
  pop_error:
    :reserved: true
    :examplereturn: error_string
    :retval: 'String'
    :description: 'Return the error message for the last call'
    :softfail: '""'
    :allow_empty: true
    :examples:
      - "
         $supports = libkv::supports()\n
         if ($supports in 'atomic_get') {\n
         \tlibkv::atomic_get('/some/key')\n
         } else {\n
         \tlibkv::get('/some/key')\n
         }\n
        "
  provider:
    :examplereturn: provider_name
    :retval: 'String'
    :description: 'Return the name of the current provider'
    :softfail: '""'
    :allow_empty: true
    :examples:
      - "
         $provider = libkv::provider()\n
         notify { \"libkv connection is: ${provider}\": }\n
        "
  watch:
    :reserved: true
  watchtree:
    :reserved: true
  newlock:
    :reserved: true

